name: CD Workflow

# on:
#   pull_request:
#     branches:
#       - master
#     types:
#       - closed

# on:
#   schedule:
#     # Runs at 9 PM UTC every day
#     - cron: '0 21 * * *'

on:
  workflow_dispatch:

jobs:
  build:
  
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          
      - name: Build with Maven
        run: mvn clean install "-DskipTests" "-Djacoco.skip=true" "-Ddependency-check.skip=true"
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'

  deploy_backend:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: java-app

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        
        app-name: 'playground1'
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_0BEA4837F01F4E4D9BCEE1ADAE79D999 }}
        package: '*.jar'

    - name: Display downloaded files
      run: ls -R
      
  deploy_front_end:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Run Unit Tests
        run: echo "Running unit tests..." 

  lighthouse_check:
    runs-on: ubuntu-latest
    needs: deploy_front_end
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install jq
        run: sudo apt-get install jq

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Run Lighthouse and check performance
        run: |
          LIGHTHOUSE_SCORE=$(lighthouse --output=json --quiet --chrome-flags="--headless --no-sandbox" "https://www.blazedemo.com" | jq '.categories.performance.score * 100')
          echo "Performance score: $LIGHTHOUSE_SCORE"
          if [ $LIGHTHOUSE_SCORE -lt 60 ]; then
            echo "error: Performance score is below 60. Blocking PR."
            exit 1
          fi     

  deploy_Backend_performance:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Run Unit Tests
        run: echo "Running unit tests..." 

  Setup_device_farm:
    runs-on: ubuntu-latest
    needs: deploy_backend
    steps:
      - uses: actions/checkout@v2
      - name: Run Unit Tests
        run: echo "Initilize Browserstack." 

  Run_mobile_device_Tests:
    runs-on: ubuntu-latest
    needs: Setup_device_farm
    steps:
      - uses: actions/checkout@v2
      - name: Run Unit Tests
        run: echo "Initilize Browserstack."         

  k6_load_test:
    name: k6 Load Test
    runs-on: ubuntu-latest
    needs: deploy_Backend_performance
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Run local k6 test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: ${{ github.workspace }}/src/test/K6/perftest.js
          flags: --out json=results.json
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: k6-report
          path: results.json

  jmeter_test:
    runs-on: ubuntu-latest
    needs: k6_load_test
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Run JMeter tests
      run: |
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz
        tar -xzf apache-jmeter-5.4.1.tgz
        apache-jmeter-5.4.1/bin/jmeter -n -t src/test/Jmeter/Test.jmx -l test_results.jtl
        
    - name: Upload JMeter Test Results
      uses: actions/upload-artifact@v2
      with:
        name: jmeter-results
        path: test_results.jtl         

  run_RestA_Tests:
        runs-on: ubuntu-latest  
        needs: deploy_backend
        steps:
          - uses: actions/checkout@v2
          - name: Set up JDK 11
            uses: actions/setup-java@v2
            with:
              java-version: '11'
              distribution: 'temurin'
              cache: maven
                
    
          - name: Run unit tests
            run: mvn test -Dtest=CalculatorTests

          - name: Generate Surefire Report
            run: mvn surefire-report:report

          - name: Upload Surefire HTML Report
            uses: actions/upload-artifact@v2
            with:
              name: surefire-reports
              path: target/site/surefire-report.html

  postman_tests:
    runs-on: ubuntu-latest
    needs: deploy_backend    
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install newman
        run: npm install -g newman

      - name: Install newman-reporter-html
        run: npm install -g newman-reporter-html

      - name: Run Postman tests
        run: newman run ${{ github.workspace }}/src/test/Postman_Tests/Calculate.postman_collection.json -r html --reporter-html-export report.html

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: postman-report
          path: report.html

  run-selenium-tests:
    runs-on: windows-latest
    needs: [deploy_backend,deploy_front_end,lighthouse_check]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
            path: ~\.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2

      - name: Install Firefox
        run: |
          choco install firefox

      - name: Run Selenium tests
        run:  mvn test -Dtest=SeleniumTest  